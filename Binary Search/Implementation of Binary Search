Binary Search Implementation in Java
This Java program implements the Binary Search algorithm to search for an element in a sorted array. Below is a detailed explanation of the code and how it works.

Table of Contents
How Binary Search Works
Code Explanation
How to Run the Code
Example Input and Output
Limitations
Overview

The program consists of two classes:
binary: Contains the binary search algorithm implementation.
binary_Search: Contains the main method to interact with the user and perform the search.

The program prompts the user to:
Enter the number of elements in the array.
Input the elements of the array (must be sorted).
Specify the element to search for.
Display the result (index of the element or an error message if not found).

How Binary Search Works
Binary Search is an efficient algorithm for finding an element in a sorted array. It works by repeatedly dividing the search interval in half. Here's how it works:

Start with the entire sorted array.
Compare the target element with the middle element of the array.
If the target is greater than the middle element, search the right half of the array.
If the target is less than the middle element, search the left half of the array.
If the target is equal to the middle element, return the index.
Repeat the process until the element is found or the search interval is empty.
Time Complexity: O(log n), where n is the number of elements in the array.

Code Explanation
1. binary Class
This class contains the b_search method, which implements the binary search algorithm.
class binary {
    public int b_search(int n, int[] array, int sn) {
        int start = 0; // Starting index of the array
        int end = (n - 1); // Ending index of the array

        while (start <= end) {
            int mid = start + (end - start) / 2; // Calculate the middle index

            if (sn > array[mid]) {
                start = mid + 1; // Search the right half
            } else if (sn < array[mid]) {
                end = mid - 1; // Search the left half
            } else {
                return mid; // Element found, return the index
            }
        }
        return -1; // Element not found
    }
}

2. binary_Search Class
This class contains the main method, which handles user input and output.
public class binary_Search {
    public static void main(String[] args) {
        int i, n, sn; // Variables for array size, loop counter, and search number
        int[] array; // Array to store elements

        Scanner get = new Scanner(System.in); // Scanner object for user input

        // Prompt user to enter the number of elements
        System.out.print("Enter No of Elements in an Array: ");
        n = get.nextInt();

        array = new int[n]; // Initialize the array with the given size

        // Prompt user to enter sorted array elements
        System.out.println("Please Enter a Sorted Array Elements.");
        for (i = 0; i < n; i++) {
            System.out.print("Enter " + (i + 1) + " Elements: ");
            array[i] = get.nextInt();
        }

        // Display the entered array
        System.out.println("---------------------------------------------");
        System.out.print("Elements are:");
        for (i = 0; i < n; i++) {
            System.out.print(" " + array[i]);
        }

        // Prompt user to enter the element to search
        System.out.println();
        System.out.println("---------------------------------------------");
        System.out.print("Element You Want to Search: ");
        sn = get.nextInt();
        System.out.println("---------------------------------------------");

        // Perform binary search
        binary obj = new binary();
        int result = obj.b_search(n, array, sn);

        // Display the result
        if (result == -1) {
            System.out.println("ERROR: Element not Found..");
        } else {
            System.out.println("Element " + array[result] + " is present at Array index " + result);
        }
    }
}

How to Run the Code
Compile the Code:
Save the code in a file named binary_Search.java.
Open a terminal or command prompt and navigate to the directory containing the file.

Compile the code using the command:
javac binary_Search.java

Run the Program:
After successful compilation, run the program using:
java binary_Search

Follow the Prompts:
Enter the number of elements in the array.
Input the sorted array elements.
Specify the element to search for.
View the result.

Example Input and Output
Input:
Enter No of Elements in an Array: 5
Please Enter a Sorted Array Elements.
Enter 1 Elements: 10
Enter 2 Elements: 20
Enter 3 Elements: 30
Enter 4 Elements: 40
Enter 5 Elements: 50
Element You Want to Search: 30

Output:
---------------------------------------------
Elements are: 10 20 30 40 50
---------------------------------------------
Element 30 is present at Array index 2

Limitations
Sorted Array Requirement:
The binary search algorithm only works on sorted arrays. If the input array is not sorted, the results will be incorrect.
Integer Input Only:
The program currently supports only integer inputs. It does not handle other data types.
No Error Handling:
The program does not handle invalid inputs (e.g., non-integer values or unsorted arrays).
Conclusion
This Java program demonstrates the implementation of the binary search algorithm. It is efficient and works well for large datasets, provided the input array is sorted. You can extend this program by adding error handling, support for other data types, or a GUI for better user interaction.

